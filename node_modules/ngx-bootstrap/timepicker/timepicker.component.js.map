{"version":3,"file":"timepicker.component.js","sourceRoot":"","sources":["../../.tmp/timepicker/timepicker.component.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:no-forward-ref max-file-line-count */\r\nimport {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component, EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges, Output,\r\n  SimpleChanges\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { TimepickerActions } from './reducer/timepicker.actions';\r\nimport { TimepickerStore } from './reducer/timepicker.store';\r\nimport { getControlsValue } from './timepicker-controls.util';\r\nimport { TimepickerConfig } from './timepicker.config';\r\nimport { TimeChangeSource, TimepickerComponentState, TimepickerControls } from './timepicker.models';\r\nimport { isValidDate, padNumber, parseTime, isInputValid } from './timepicker.utils';\r\n\r\nexport const TIMEPICKER_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  // tslint:disable-next-line\r\n  useExisting: forwardRef(() => TimepickerComponent),\r\n  multi: true\r\n};\r\n\r\n@Component({\r\n  selector: 'timepicker',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [TIMEPICKER_CONTROL_VALUE_ACCESSOR, TimepickerStore],\r\n  template: `\r\n    <table>\r\n      <tbody>\r\n      <tr class=\"text-center\" [class.hidden]=\"!isSpinnersVisible\">\r\n        <!-- increment hours button-->\r\n        <td>\r\n          <a class=\"btn btn-link\" [class.disabled]=\"!canIncrementHours\"\r\n             (click)=\"changeHours(hourStep)\"\r\n          ><span class=\"glyphicon glyphicon-chevron-up\"></span></a>\r\n        </td>\r\n        <!-- divider -->\r\n        <td>&nbsp;&nbsp;&nbsp;</td>\r\n        <!-- increment minutes button -->\r\n        <td>\r\n          <a class=\"btn btn-link\" [class.disabled]=\"!canIncrementMinutes\"\r\n             (click)=\"changeMinutes(minuteStep)\"\r\n          ><span class=\"glyphicon glyphicon-chevron-up\"></span></a>\r\n        </td>\r\n        <!-- divider -->\r\n        <td *ngIf=\"showSeconds\">&nbsp;</td>\r\n        <!-- increment seconds button -->\r\n        <td *ngIf=\"showSeconds\">\r\n          <a class=\"btn btn-link\" [class.disabled]=\"!canIncrementSeconds\"\r\n             (click)=\"changeSeconds(secondsStep)\">\r\n            <span class=\"glyphicon glyphicon-chevron-up\"></span>\r\n          </a>\r\n        </td>\r\n        <!-- space between -->\r\n        <td>&nbsp;&nbsp;&nbsp;</td>\r\n        <!-- meridian placeholder-->\r\n        <td *ngIf=\"showMeridian\"></td>\r\n      </tr>\r\n      <tr>\r\n        <!-- hours -->\r\n        <td class=\"form-group\" [class.has-error]=\"invalidHours\">\r\n          <input type=\"text\" style=\"width:50px;\"\r\n                 class=\"form-control text-center\"\r\n                 placeholder=\"HH\"\r\n                 maxlength=\"2\"\r\n                 [readonly]=\"readonlyInput\"\r\n                 [value]=\"hours\"\r\n                 (wheel)=\"prevDef($event);changeHours(hourStep * wheelSign($event), 'wheel')\"\r\n                 (keydown.ArrowUp)=\"changeHours(hourStep, 'key')\"\r\n                 (keydown.ArrowDown)=\"changeHours(-hourStep, 'key')\"\r\n                 (change)=\"updateHours($event.target.value)\"></td>\r\n        <!-- divider -->\r\n        <td>&nbsp;:&nbsp;</td>\r\n        <!-- minutes -->\r\n        <td class=\"form-group\" [class.has-error]=\"invalidMinutes\">\r\n          <input style=\"width:50px;\" type=\"text\"\r\n                 class=\"form-control text-center\"\r\n                 placeholder=\"MM\"\r\n                 maxlength=\"2\"\r\n                 [readonly]=\"readonlyInput\"\r\n                 [value]=\"minutes\"\r\n                 (wheel)=\"prevDef($event);changeMinutes(minuteStep * wheelSign($event), 'wheel')\"\r\n                 (keydown.ArrowUp)=\"changeMinutes(minuteStep, 'key')\"\r\n                 (keydown.ArrowDown)=\"changeMinutes(-minuteStep, 'key')\"\r\n                 (change)=\"updateMinutes($event.target.value)\">\r\n        </td>\r\n        <!-- divider -->\r\n        <td *ngIf=\"showSeconds\">&nbsp;:&nbsp;</td>\r\n        <!-- seconds -->\r\n        <td class=\"form-group\" *ngIf=\"showSeconds\" [class.has-error]=\"invalidSeconds\">\r\n          <input style=\"width:50px;\" type=\"text\"\r\n                 class=\"form-control text-center\"\r\n                 placeholder=\"SS\"\r\n                 maxlength=\"2\"\r\n                 [readonly]=\"readonlyInput\"\r\n                 [value]=\"seconds\"\r\n                 (wheel)=\"prevDef($event);changeSeconds(secondsStep * wheelSign($event), 'wheel')\"\r\n                 (keydown.ArrowUp)=\"changeSeconds(secondsStep, 'key')\"\r\n                 (keydown.ArrowDown)=\"changeSeconds(-secondsStep, 'key')\"\r\n                 (change)=\"updateSeconds($event.target.value)\">\r\n        </td>\r\n        <!-- space between -->\r\n        <td>&nbsp;&nbsp;&nbsp;</td>\r\n        <!-- meridian -->\r\n        <td *ngIf=\"showMeridian\">\r\n          <button type=\"button\" class=\"btn btn-default text-center\"\r\n                  [disabled]=\"readonlyInput\"\r\n                  [class.disabled]=\"readonlyInput\"\r\n                  (click)=\"toggleMeridian()\"\r\n          >{{ meridian }}\r\n          </button>\r\n        </td>\r\n      </tr>\r\n      <tr class=\"text-center\" [class.hidden]=\"!isSpinnersVisible\">\r\n        <!-- decrement hours button-->\r\n        <td>\r\n          <a class=\"btn btn-link\" [class.disabled]=\"!canDecrementHours\" (click)=\"changeHours(-hourStep)\">\r\n            <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n          </a>\r\n        </td>\r\n        <!-- divider -->\r\n        <td>&nbsp;&nbsp;&nbsp;</td>\r\n        <!-- decrement minutes button-->\r\n        <td>\r\n          <a class=\"btn btn-link\" [class.disabled]=\"!canDecrementMinutes\" (click)=\"changeMinutes(-minuteStep)\">\r\n            <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n          </a>\r\n        </td>\r\n        <!-- divider -->\r\n        <td *ngIf=\"showSeconds\">&nbsp;</td>\r\n        <!-- decrement seconds button-->\r\n        <td *ngIf=\"showSeconds\">\r\n          <a class=\"btn btn-link\" [class.disabled]=\"!canDecrementSeconds\" (click)=\"changeSeconds(-secondsStep)\">\r\n            <span class=\"glyphicon glyphicon-chevron-down\"></span>\r\n          </a>\r\n        </td>\r\n        <!-- space between -->\r\n        <td>&nbsp;&nbsp;&nbsp;</td>\r\n        <!-- meridian placeholder-->\r\n        <td *ngIf=\"showMeridian\"></td>\r\n      </tr>\r\n      </tbody>\r\n    </table>\r\n  `\r\n})\r\nexport class TimepickerComponent implements ControlValueAccessor, TimepickerComponentState, TimepickerControls, OnChanges {\r\n  /** hours change step */\r\n  @Input() hourStep: number;\r\n  /** hours change step */\r\n  @Input() minuteStep: number;\r\n  /** seconds change step */\r\n  @Input() secondsStep: number;\r\n  /** if true hours and minutes fields will be readonly */\r\n  @Input() readonlyInput: boolean;\r\n  /** if true scroll inside hours and minutes inputs will change time */\r\n  @Input() mousewheel: boolean;\r\n  /** if true up/down arrowkeys inside hours and minutes inputs will change time */\r\n  @Input() arrowkeys: boolean;\r\n  /** if true spinner arrows above and below the inputs will be shown */\r\n  @Input() showSpinners: boolean;\r\n  @Input() showMeridian: boolean;\r\n  @Input() showSeconds: boolean;\r\n\r\n  /** meridian labels based on locale */\r\n  @Input() meridians: string[];\r\n\r\n  /** minimum time user can select */\r\n  @Input() min: Date;\r\n  /** maximum time user can select */\r\n  @Input() max: Date;\r\n\r\n  /** emits true if value is a valid date */\r\n  @Output() isValid: EventEmitter<boolean> = new EventEmitter();\r\n\r\n  // ui variables\r\n  hours: string;\r\n  minutes: string;\r\n  seconds: string;\r\n  meridian: string;\r\n\r\n  get isSpinnersVisible(): boolean {\r\n    return this.showSpinners && !this.readonlyInput;\r\n  }\r\n\r\n  // min\\max validation for input fields\r\n  invalidHours = false;\r\n  invalidMinutes = false;\r\n  invalidSeconds = false;\r\n\r\n  // time picker controls state\r\n  canIncrementHours: boolean;\r\n  canIncrementMinutes: boolean;\r\n  canIncrementSeconds: boolean;\r\n\r\n  canDecrementHours: boolean;\r\n  canDecrementMinutes: boolean;\r\n  canDecrementSeconds: boolean;\r\n\r\n  // control value accessor methods\r\n  onChange: any = Function.prototype;\r\n  onTouched: any = Function.prototype;\r\n\r\n  constructor(_config: TimepickerConfig,\r\n              private _cd: ChangeDetectorRef,\r\n              private _store: TimepickerStore,\r\n              private _timepickerActions: TimepickerActions) {\r\n    Object.assign(this, _config);\r\n    // todo: add unsubscribe\r\n    _store\r\n      .select((state) => state.value)\r\n      .subscribe((value) => {\r\n        // update UI values if date changed\r\n        this._renderTime(value);\r\n        this.onChange(value);\r\n\r\n        this._store.dispatch(this._timepickerActions.updateControls(getControlsValue(this)));\r\n      });\r\n\r\n    _store\r\n      .select((state) => state.controls)\r\n      .subscribe((controlsState) => {\r\n        this.isValid.emit(isInputValid(this.hours, this.minutes, this.seconds, this.isPM()));\r\n        Object.assign(this, controlsState);\r\n        _cd.markForCheck();\r\n      });\r\n  }\r\n\r\n  isPM(): boolean {\r\n    return this.showMeridian && this.meridian === this.meridians[1];\r\n  }\r\n\r\n  prevDef($event: any) {\r\n    $event.preventDefault();\r\n  }\r\n\r\n  wheelSign($event: any): number {\r\n    return Math.sign($event.deltaY as number) * -1;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    this._store.dispatch(this._timepickerActions.updateControls(getControlsValue(this)));\r\n  }\r\n\r\n  changeHours(step: number, source: TimeChangeSource = ''): void {\r\n    this._store.dispatch(this._timepickerActions.changeHours({step, source}));\r\n  }\r\n\r\n  changeMinutes(step: number, source: TimeChangeSource = ''): void {\r\n    this._store.dispatch(this._timepickerActions.changeMinutes({step, source}));\r\n  }\r\n\r\n  changeSeconds(step: number, source: TimeChangeSource = ''): void {\r\n    this._store.dispatch(this._timepickerActions.changeSeconds({step, source}));\r\n  }\r\n\r\n  updateHours(hours: string): void {\r\n    this.hours = hours;\r\n    this._updateTime();\r\n  }\r\n\r\n  updateMinutes(minutes: string) {\r\n    this.minutes = minutes;\r\n    this._updateTime();\r\n  }\r\n\r\n  updateSeconds(seconds: string) {\r\n    this.seconds = seconds;\r\n    this._updateTime();\r\n  }\r\n\r\n  _updateTime() {\r\n    if (!isInputValid(this.hours, this.minutes, this.seconds, this.isPM())) {\r\n      this.onChange(null);\r\n      return;\r\n    }\r\n    this._store.dispatch(this._timepickerActions\r\n      .setTime({\r\n        hour: this.hours,\r\n        minute: this.minutes,\r\n        seconds: this.seconds,\r\n        isPM: this.isPM()\r\n      }));\r\n  }\r\n\r\n  toggleMeridian(): void {\r\n    if (!this.showMeridian || this.readonlyInput) {\r\n      return;\r\n    }\r\n\r\n    const _hoursPerDayHalf = 12;\r\n    this._store.dispatch(this._timepickerActions.changeHours({step: _hoursPerDayHalf, source: ''}));\r\n  }\r\n\r\n  /**\r\n   * Write a new value to the element.\r\n   */\r\n  writeValue(obj: any): void {\r\n    if (isValidDate(obj)) {\r\n      this._store.dispatch(this._timepickerActions.writeValue(parseTime(obj)));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a change event.\r\n   */\r\n  registerOnChange(fn: (_: any) => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  /**\r\n   * Set the function to be called when the control receives a touch event.\r\n   */\r\n  registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  /**\r\n   * This function is called when the control status changes to or from \"DISABLED\".\r\n   * Depending on the value, it will enable or disable the appropriate DOM element.\r\n   *\r\n   * @param isDisabled\r\n   */\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.readonlyInput = isDisabled;\r\n  }\r\n\r\n  private _renderTime(value: string | Date): void {\r\n    if (!isValidDate(value)) {\r\n      this.hours = '';\r\n      this.minutes = '';\r\n      this.seconds = '';\r\n      this.meridian = this.meridians[0];\r\n\r\n      return;\r\n    }\r\n\r\n    const _value = parseTime(value);\r\n    const _hoursPerDayHalf = 12;\r\n    let _hours = _value.getHours();\r\n\r\n    if (this.showMeridian) {\r\n      this.meridian = this.meridians[_hours >= _hoursPerDayHalf ? 1 : 0];\r\n      _hours = _hours % _hoursPerDayHalf;\r\n      // should be 12 PM, not 00 PM\r\n      if (_hours === 0) {\r\n        _hours = _hoursPerDayHalf;\r\n      }\r\n    }\r\n\r\n    this.hours = padNumber(_hours);\r\n    this.minutes = padNumber(_value.getMinutes());\r\n    this.seconds = padNumber(_value.getUTCSeconds());\r\n  }\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}