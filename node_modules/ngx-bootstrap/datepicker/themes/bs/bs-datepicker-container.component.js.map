{"version":3,"file":"bs-datepicker-container.component.js","sourceRoot":"","sources":["../../../../.tmp/datepicker/themes/bs/bs-datepicker-container.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { BsDatepickerStore } from '../../reducer/bs-datepicker.store';\r\nimport { BsDatepickerActions } from '../../reducer/bs-datepicker.actions';\r\nimport {\r\n  BsNavigationEvent, DatepickerRenderOptions, DayHoverEvent, DayViewModel,\r\n  MonthViewModel\r\n} from '../../models/index';\r\nimport 'rxjs/add/operator/filter';\r\n\r\n@Component({\r\n  selector: 'bs-datepicker-container',\r\n  providers: [BsDatepickerStore],\r\n  template: `\r\n    <bs-datepicker-view\r\n      [months]=\"months\"\r\n      [options]=\"options\"\r\n      (onNavigate)=\"navigateTo($event)\"\r\n      (onHover)=\"hoverHandler($event)\"\r\n      (onSelect)=\"selectHandler($event)\"\r\n    ></bs-datepicker-view>\r\n  `,\r\n  host: {\r\n    '(click)': '_stopPropagation($event)',\r\n    style: 'position: absolute; display: block;'\r\n  }\r\n})\r\nexport class BsDatepickerContainerComponent {\r\n  @Input()\r\n  set value(value: Date) {\r\n    this._bsDatepickerStore.dispatch(this._actions.select(value));\r\n  }\r\n\r\n  @Output() valueChange = new EventEmitter<Date>();\r\n\r\n  months: MonthViewModel[];\r\n  options: DatepickerRenderOptions;\r\n\r\n  constructor(private _bsDatepickerStore: BsDatepickerStore,\r\n              private _actions: BsDatepickerActions) {\r\n    // data binding state <--> model\r\n    this._bsDatepickerStore.select(state => state.flaggedMonths)\r\n      .filter(months => !!months)\r\n      .subscribe(months => this.months = months);\r\n\r\n    this._bsDatepickerStore.select(state => state.renderOptions)\r\n      .filter(options => !!options)\r\n      .subscribe(options => this.options = options);\r\n\r\n    // set render options\r\n    this._bsDatepickerStore.dispatch(this._actions.renderOptions({\r\n      displayMonths: 1,\r\n      showWeekNumbers: true\r\n    }));\r\n\r\n    // on selected date change\r\n    this._bsDatepickerStore.select(state => state.selectedDate)\r\n      .subscribe(date => this.valueChange.emit(date));\r\n\r\n    // TODO: extract effects\r\n    // calculate month model on view model change\r\n    this._bsDatepickerStore\r\n      .select(state => state.viewDate)\r\n      .subscribe(viewDate =>\r\n        this._bsDatepickerStore.dispatch(this._actions.calculate(viewDate)));\r\n\r\n    // format calendar values on month model change\r\n    this._bsDatepickerStore\r\n      .select(state => state.monthsModel)\r\n      .filter(monthModel => !!monthModel)\r\n      .subscribe(month =>\r\n        this._bsDatepickerStore.dispatch(this._actions.format()));\r\n\r\n    // flag day values\r\n    this._bsDatepickerStore\r\n      .select(state => state.formattedMonths)\r\n      .filter(month => !!month)\r\n      .subscribe(month =>\r\n        this._bsDatepickerStore.dispatch(this._actions.flag()));\r\n\r\n    // flag day values\r\n    this._bsDatepickerStore.select(state => state.selectedDate)\r\n      .filter(selectedDate => !!selectedDate)\r\n      .subscribe(selectedDate =>\r\n        this._bsDatepickerStore.dispatch(this._actions.flag()));\r\n\r\n    // on hover\r\n    this._bsDatepickerStore.select(state => state.hoveredDate)\r\n      .filter(hoveredDate => !!hoveredDate)\r\n      .subscribe(hoveredDate =>\r\n        this._bsDatepickerStore.dispatch(this._actions.flag()));\r\n  }\r\n\r\n  navigateTo(event: BsNavigationEvent): void {\r\n    this._bsDatepickerStore.dispatch(this._actions.navigateStep(event.step));\r\n  }\r\n\r\n  hoverHandler(event: DayHoverEvent): void {\r\n    if (event.day.isOtherMonth) {\r\n      return;\r\n    }\r\n    this._bsDatepickerStore.dispatch(this._actions.hover(event));\r\n    event.day.isHovered = event.isHovered;\r\n  }\r\n\r\n  selectHandler(day: DayViewModel): void {\r\n    if (day.isOtherMonth) {\r\n      return;\r\n    }\r\n    this._bsDatepickerStore.dispatch(this._actions.select(day.date));\r\n  }\r\n\r\n  _stopPropagation(event: any): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}