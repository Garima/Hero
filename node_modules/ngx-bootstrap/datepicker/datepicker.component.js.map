{"version":3,"file":"datepicker.component.js","sourceRoot":"","sources":["../../.tmp/datepicker/datepicker.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, Output, ViewChild, forwardRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { DatePickerInnerComponent } from './datepicker-inner.component';\r\nimport { DatepickerConfig } from './datepicker.config';\r\n\r\nexport const DATEPICKER_CONTROL_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => DatePickerComponent),\r\n  multi: true\r\n};\r\n\r\n/* tslint:disable:component-selector-name component-selector-type */\r\n@Component({\r\n  selector: 'datepicker',\r\n  template: `\r\n    <datepicker-inner [activeDate]=\"activeDate\"\r\n                      (update)=\"onUpdate($event)\"\r\n                      [datepickerMode]=\"datepickerMode\"\r\n                      [initDate]=\"initDate\"\r\n                      [minDate]=\"minDate\"\r\n                      [maxDate]=\"maxDate\"\r\n                      [minMode]=\"minMode\"\r\n                      [maxMode]=\"maxMode\"\r\n                      [showWeeks]=\"showWeeks\"\r\n                      [formatDay]=\"formatDay\"\r\n                      [formatMonth]=\"formatMonth\"\r\n                      [formatYear]=\"formatYear\"\r\n                      [formatDayHeader]=\"formatDayHeader\"\r\n                      [formatDayTitle]=\"formatDayTitle\"\r\n                      [formatMonthTitle]=\"formatMonthTitle\"\r\n                      [startingDay]=\"startingDay\"\r\n                      [yearRange]=\"yearRange\"\r\n                      [customClass]=\"customClass\"\r\n                      [dateDisabled]=\"dateDisabled\"\r\n                      [onlyCurrentMonth]=\"onlyCurrentMonth\"\r\n                      [shortcutPropagation]=\"shortcutPropagation\"\r\n                      [monthColLimit]=\"monthColLimit\"\r\n                      [yearColLimit]=\"yearColLimit\"\r\n                      (selectionDone)=\"onSelectionDone($event)\"\r\n                      (activeDateChange)=\"onActiveDateChange($event)\">\r\n      <daypicker tabindex=\"0\"></daypicker>\r\n      <monthpicker tabindex=\"0\"></monthpicker>\r\n      <yearpicker tabindex=\"0\"></yearpicker>\r\n    </datepicker-inner>\r\n    `,\r\n  providers: [DATEPICKER_CONTROL_VALUE_ACCESSOR]\r\n})\r\n/* tslint:enable:component-selector-name component-selector-type */\r\nexport class DatePickerComponent implements ControlValueAccessor {\r\n  /** sets datepicker mode, supports: `day`, `month`, `year` */\r\n  @Input() public datepickerMode: string = 'day';\r\n  /** default date to show if `ng-model` value is not specified */\r\n  @Input() public initDate: Date;\r\n  /**  oldest selectable date */\r\n  @Input() public minDate: Date;\r\n  /** latest selectable date */\r\n  @Input() public maxDate: Date;\r\n  /** set lower datepicker mode, supports: `day`, `month`, `year` */\r\n  @Input() public minMode: string;\r\n  /** sets upper datepicker mode, supports: `day`, `month`, `year` */\r\n  @Input() public maxMode: string;\r\n  /** if false week numbers will be hidden */\r\n  @Input() public showWeeks: boolean = true;\r\n  /** format of day in month */\r\n  @Input() public formatDay: string;\r\n  /** format of month in year */\r\n  @Input() public formatMonth: string;\r\n  /** format of year in year range */\r\n  @Input() public formatYear: string;\r\n  /** format of day in week header */\r\n  @Input() public formatDayHeader: string;\r\n  /** format of title when selecting day */\r\n  @Input() public formatDayTitle: string;\r\n  /** format of title when selecting month */\r\n  @Input() public formatMonthTitle: string;\r\n  /** starting day of the week from 0-6 (0=Sunday, ..., 6=Saturday) */\r\n  @Input() public startingDay: number;\r\n  /** number of years displayed in year selection */\r\n  @Input() public yearRange: number;\r\n  /** if true only dates from the currently displayed month will be shown */\r\n  @Input() public onlyCurrentMonth: boolean;\r\n  /** if true shortcut`s event propagation will be disabled */\r\n  @Input() public shortcutPropagation: boolean;\r\n  /** number of months displayed in a single row of month picker */\r\n  @Input() public monthColLimit: number;\r\n  /** number of years displayed in a single row of year picker */\r\n  @Input() public yearColLimit: number;\r\n  /** array of custom css classes to be applied to targeted dates */\r\n  @Input() public customClass: { date: Date, mode: string, clazz: string }[];\r\n  /** array of disabled dates */\r\n  @Input() public dateDisabled: { date: Date, mode: string }[];\r\n\r\n  /** currently active date */\r\n  @Input()\r\n  public get activeDate(): Date {\r\n    return this._activeDate || this._now;\r\n  }\r\n\r\n  public set activeDate(value: Date) {\r\n    this._activeDate = value;\r\n  }\r\n\r\n  @Output() public selectionDone: EventEmitter<Date> = new EventEmitter<Date>(undefined);\r\n\r\n  /** callback to invoke when the activeDate is changed. */\r\n  @Output() public activeDateChange: EventEmitter<Date> = new EventEmitter<Date>(undefined);\r\n\r\n  @ViewChild(DatePickerInnerComponent) public _datePicker: DatePickerInnerComponent;\r\n\r\n  public onChange: any = Function.prototype;\r\n  public onTouched: any = Function.prototype;\r\n\r\n  protected _now: Date = new Date();\r\n  protected _activeDate: Date;\r\n  protected config: DatepickerConfig;\r\n\r\n  public constructor(config: DatepickerConfig) {\r\n    this.config = config;\r\n    this.configureOptions();\r\n  }\r\n\r\n  public configureOptions(): void {\r\n    Object.assign(this, this.config);\r\n  }\r\n\r\n  public onUpdate(event: any): void {\r\n    this.activeDate = event;\r\n    this.onChange(event);\r\n  }\r\n\r\n  public onSelectionDone(event: Date): void {\r\n    this.selectionDone.emit(event);\r\n  }\r\n\r\n  public onActiveDateChange(event: Date): void {\r\n    this.activeDateChange.emit(event);\r\n  }\r\n  // todo: support null value\r\n  public writeValue(value: any): void {\r\n    if (this._datePicker.compare(value, this._activeDate) === 0) {\r\n      return;\r\n    }\r\n    if (value && value instanceof Date) {\r\n      this.activeDate = value;\r\n      this._datePicker.select(value, false);\r\n      return;\r\n    }\r\n\r\n    this.activeDate = value ? new Date(value) : void 0;\r\n  }\r\n\r\n  public registerOnChange(fn: (_: any) => {}): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  public registerOnTouched(fn: () => {}): void {\r\n    this.onTouched = fn;\r\n  }\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}