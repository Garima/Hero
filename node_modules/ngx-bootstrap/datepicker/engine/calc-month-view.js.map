{"version":3,"file":"calc-month-view.js","sourceRoot":"","sources":["../../../.tmp/datepicker/engine/calc-month-view.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,kBAAkB,EAAE,MAAM,oCAAoC,CAAC;AACxE,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AACtE,OAAO,EAAE,SAAS,EAAE,MAAM,oCAAoC,CAAC;AAE/D,MAAM,8BAA8B,IAAU,EAAE,OAAyB;IACvE,IAAM,QAAQ,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;IAE1C,IAAI,SAAS,GAAG,wBAAwB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC5D,IAAM,YAAY,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAC/C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACxC,YAAY,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC3C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC;YACvC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;YAC/B,SAAS,GAAG,SAAS,CAAC,SAAS,EAAE,EAAC,GAAG,EAAE,CAAC,EAAC,CAAC,CAAC;QAC7C,CAAC;IACH,CAAC;IAED,MAAM,CAAC;QACL,UAAU,EAAE,YAAY;QACxB,KAAK,EAAE,QAAQ;KAChB,CAAC;AACJ,CAAC","sourcesContent":["// user and model input should handle parsing and validating input values\r\n// should accept some options\r\n// todo: split out formatting\r\nimport { DaysCalendarModel, MonthViewOptions } from '../models/index';\r\nimport { getFirstDayOfMonth } from '../../bs-moment/utils/date-getters';\r\nimport { getStartingDayOfCalendar } from '../utils/bs-calendar-utils';\r\nimport { shiftDate } from '../../bs-moment/utils/date-setters';\r\n\r\nexport function calculateMonthModel(date: Date, options: MonthViewOptions): DaysCalendarModel {\r\n  const firstDay = getFirstDayOfMonth(date);\r\n\r\n  let prevValue = getStartingDayOfCalendar(firstDay, options);\r\n  const daysCalendar = new Array(options.height);\r\n  for (let i = 0; i < options.height; i++) {\r\n    daysCalendar[i] = new Array(options.width);\r\n    for (let j = 0; j < options.width; j++) {\r\n      daysCalendar[i][j] = prevValue;\r\n      prevValue = shiftDate(prevValue, {day: 1});\r\n    }\r\n  }\r\n\r\n  return {\r\n    daysMatrix: daysCalendar,\r\n    month: firstDay\r\n  };\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}